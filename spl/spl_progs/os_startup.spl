//load INT11
loadi(24,37);
loadi(25,38)
//load INT15
loadi(32,45);
loadi(33,46);
//load INT7
loadi(16,29);
loadi(17,30);
//load INT8
loadi(18,31);
loadi(19,32);

//set the user area page 28672 + 11
[PROCESS_TABLE + 11] = 82;
// PID for idle
[PROCESS_TABLE + 1] = 0;
//STATE for idle
[PROCESS_TABLE + 4] = CREATED;

//user area page 
[PROCESS_TABLE + 16*1 + 11] = 80;
// PID for init
[PROCESS_TABLE + 16*1 + 1] = 1;
//STATE for init
[PROCESS_TABLE + 16*1 + 4] = RUNNING;

//load idle code
loadi(69,11);
loadi(70,12);
//load timer block
loadi(4,17);
loadi(5,18);
//load the lib code
loadi(63,13);
loadi(64,14);
//load the init program
loadi(65,7);
loadi(66,8);
//load INT10 module
loadi(22,35);
loadi(23,36);
//load exception handler
loadi(2,15);
loadi(3,16);


PTBR=PAGE_TABLE_BASE;  //as PID of idle process is 0
[PROCESS_TABLE + 14]= PTBR;
PTLR=10;
[PROCESS_TABLE + 15] = PTLR;
[PROCESS_TABLE + 13] = 8*512;
[PROCESS_TABLE + 12] = 0;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

//init process
PTBR = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16*1 + 14]= PTBR;
PTLR = 10;
[PROCESS_TABLE + 16*1 + 15]= PTLR;
[PROCESS_TABLE + 16*1 + 12] = 0;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";
//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack 
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[76*512] = [65*512 +1];//top of stack set to logical start of init, from where the IP is set by ireturn
[81*512] = [69*512 + 1];//top of stack set to ligical start of idle

//Entry point for init
PTBR = [PROCESS_TABLE + 16*1 + 14];
PTLR = [PROCESS_TABLE + 16*1 + 15];
SP = 8*512;//sp made to point tp top of stack
[SYSTEM_STATUS_TABLE +1] = 1;
R15="os";
print R15;
ireturn;
