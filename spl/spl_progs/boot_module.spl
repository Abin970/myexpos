//load mod3
loadi(46,59);
loadi(47,60);
//load int5
loadi(12,25);
loadi(13,26);
//load int4
loadi(10,23);
loadi(11,24);
//load rootfile
loadi(62,5);
//load int13
loadi(28,41);
loadi(29,42);
//load int14
loadi(30,43);
loadi(31,44);
//load disk free list
loadi(61,2);
//load disk intp
loadi(6,19);
loadi(7,20);
//load inode
loadi(59,3);
loadi(60,4);
//load INT9
loadi(20,33);
loadi(21,34);
//load mod_1
loadi(42,55);
loadi(43,56);
//load mod_2
loadi(44,57);
loadi(45,58);
//load INT7
loadi(16,29);
loadi(17,30);
//load timer block
loadi(4,17);
loadi(5,18);
//load the lib code
loadi(63,13);
loadi(64,14);
//load the init program
loadi(65,7);
loadi(66,8);
//load INT10 module
loadi(22,35);
loadi(23,36);
//load exception handler
loadi(2,15);
loadi(3,16);
//2nd prog
//loadi(85,69);
//loadi(86,70);
//3rd prog
//loadi(91,70);
//MOD 5
loadi(50,63);
loadi(51,64);
//MOD 0
loadi(40,53);
loadi(41,54);
//MOD 4
loadi(48,61);
loadi(49,62);
//load int 6
loadi(14,27);
loadi(15,28);
//load console interrupt
loadi(8,21);
loadi(9,22);

//init process
PTBR = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16*1 + 14]= PTBR;
PTLR = 10;
[PROCESS_TABLE + 16*1 + 15]= PTLR;
[PROCESS_TABLE + 16*1 + 12] = 0;
//user area page
[PROCESS_TABLE + 16*1 + 11] = 80;
// PID for init
[PROCESS_TABLE + 16*1 + 1] = 1;
//STATE for init
[PROCESS_TABLE + 16*1 + 4] = CREATED;
// UPTR
[PROCESS_TABLE + 16*1 + 13] = 8*512;
//user id
[PROCESS_TABLE + 16*1 + 3]=1;


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";
//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[76*512] = [65*512 + 1];

//init disk map table
alias disk_off R15;
disk_off=2;
while(disk_off<10) do
[DISK_MAP_TABLE + 1*10+ disk_off]=-1;
disk_off=disk_off+1;
endwhile;

alias mem_pg R15;
mem_pg=0;
while(mem_pg < 128) do
	if(mem_pg < 83)then
	[MEMORY_FREE_LIST +mem_pg]=1;
	else
	[MEMORY_FREE_LIST +mem_pg]=0;
	endif;
mem_pg=mem_pg+1;
endwhile;
[SYSTEM_STATUS_TABLE+2]=45;
[SYSTEM_STATUS_TABLE+3]=0;


alias PID R0;
alias process_table R1;
PID=2;
while(PID < 16) do
	[PROCESS_TABLE + PID*16 + 4] = TERMINATED;	
	PID = PID + 1;
endwhile;

alias per_p_rtb R5;
alias per_p_off R6;
per_p_rtb = [PROCESS_TABLE +1*16 +11]*512+ 496;
per_p_off = 0;
while(per_p_off < 8) do
        [per_p_rtb + 2*per_p_off]=-1;
        per_p_off=per_p_off+1;
endwhile;

alias semid R15;
semid=0;
while(semid<MAX_SEM_COUNT) do
	[SEMAPHORE_TABLE + 4*semid]=-1;
	[SEMAPHORE_TABLE + 4*semid +1]=0;
	semid=semid+1;	
endwhile;

//file status table init
alias file_status_off R15;
file_status_off=0;
while(file_status_off<MAX_FILE_NUM) do
	[FILE_STATUS_TABLE + 4*file_status_off + 0]=-1;
	[FILE_STATUS_TABLE + 4*file_status_off + 1]=-1;
	file_status_off=file_status_off+1;
endwhile;

//buffer table init 
alias buffer_off R15;
buffer_off=0;
while(buffer_off<MAX_BUFFER) do
	[BUFFER_TABLE + 4*buffer_off + 0]=-1;
	[BUFFER_TABLE + 4*buffer_off + 1]=0;
	[BUFFER_TABLE + 4*buffer_off + 2]=-1;
	buffer_off=buffer_off+1;
endwhile;
//init open file table
alias oft_off R14;
oft_off=0;
while(oft_off<MAX_OPENFILE_NUM) do
	[OPEN_FILE_TABLE + 4*oft_off + 0]=-1;
	[OPEN_FILE_TABLE + 4*oft_off + 1]=0;
	oft_off=oft_off+1;
endwhile;

//single time copy inode entries to root file
//alias inode_root_off R15;
//inode_root_off=0;
//while(inode_root_off<MAX_FILE_NUM) do
//	[ROOT_FILE + inode_root_off*8 + 0]=[INODE_TABLE + inode_root_off*16 +  1];
//	[ROOT_FILE + inode_root_off*8 + 1]=[INODE_TABLE + inode_root_off*16 +  2];
//	[ROOT_FILE + inode_root_off*8 + 2]=[INODE_TABLE + inode_root_off*16 +  0];
//	[ROOT_FILE + inode_root_off*8 + 3]=[INODE_TABLE + inode_root_off*16 +  3];
//	[ROOT_FILE + inode_root_off*8 + 4]=[INODE_TABLE + inode_root_off*16 +  4];
//	[ROOT_FILE + inode_root_off*8 + 5]=-1;
//	[ROOT_FILE + inode_root_off*8 + 6]=-1;
//	[ROOT_FILE + inode_root_off*8 + 7]=-1;
//	inode_root_off=inode_root_off+1;
//endwhile;

//release terminal
[TERMINAL_STATUS_TABLE] = 0;
//ralease disk
[DISK_STATUS_TABLE]=0;
return;
